typedef int vmm_spinlock_t;typedef int u64;typedef int u16;typedef int bool;typedef int arch_regs_t;typedef int vmm_rwlock_t;typedef int resource_size_t;typedef int loff_t;typedef int irq_flags_t;typedef int u32;typedef int pthread_t;typedef int vmm_scheduler_ctrl;typedef int virtual_addr_t;typedef int u8;typedef int virtual_size_t;typedef int physical_addr_t;typedef int physical_size_t;typedef int atomic_t;typedef int vmm_iommu_fault_handler_t;typedef int dma_addr_t;typedef int size_t;typedef int off_t;typedef int vmm_dr_release_t;typedef int vmm_dr_match_t;typedef int vmm_clocksource_init_t;typedef int s64;typedef int va_list;typedef int vmm_host_irq_handler_t;typedef int vmm_host_irq_function_t;typedef int vmm_host_irq_init_t;typedef int Elf_Ehdr;typedef int Elf_Shdr;typedef int Elf_Sym;typedef int s16;typedef int vmm_clockchip_init_t;typedef int pthread_spinlock_t;


int vmm_chardev_doioctl(struct vmm_chardev *cdev,
			int cmd, void *arg)
{
	if (cdev && cdev->ioctl) {
		return cdev->ioctl(cdev, cmd, arg);
	} else {
		return VMM_EFAIL;
	}
}

u32 vmm_chardev_doread(
		       u8 *dest, size_t len, off_t *off, bool block)
{
	u32 b;
	bool sleep;

	if (cdev && cdev->read) {
		if (block) {
			b = 0;
			sleep = vmm_scheduler_orphan_context() ? TRUE : FALSE;
			while (b < len) {
				b += cdev->read(cdev, &dest[b], len - b, off,
						sleep);
			}
			return b;
		} else {
			return cdev->read(cdev, dest, len, off, FALSE);
		}
	} else {
		return 0;
	}
}

u32 vmm_chardev_dowrite(
			u8 *src, size_t len, off_t *off, bool block)
{
	u32 b;
	bool sleep;

	if (cdev && cdev->write) {
		if (block) {
			b = 0;
			sleep = vmm_scheduler_orphan_context() ? TRUE : FALSE;
			while (b < len) {
				b += cdev->write(cdev, &src[b], len - b, off,
						 sleep);
			}
			return b;
		} else {
			return cdev->write(cdev, src, len, off, FALSE);
		}
	} else {
		return 0;
	}
}

static struct vmm_class chardev_class = {
	.name = VMM_CHARDEV_CLASS_NAME,
};

int vmm_chardev_register(struct vmm_chardev *cdev)
{
	if (!(cdev && cdev->read && cdev->write)) {
		return VMM_EFAIL;
	}

	vmm_devdrv_initialize_device(&cdev->dev);
	if (strlcpy(cdev->dev.name, cdev->name, sizeof(cdev->dev.name)) >=
	    sizeof(cdev->dev.name)) {
		return VMM_EOVERFLOW;
	}
	cdev->dev.class = &chardev_class;
	vmm_devdrv_set_data(&cdev->dev, cdev);

	return vmm_devdrv_register_device(&cdev->dev);
}

int vmm_chardev_unregister(struct vmm_chardev *cdev)
{
	if (!cdev) {
		return VMM_EFAIL;
	}

	return vmm_devdrv_unregister_device(&cdev->dev);
}

struct vmm_chardev *vmm_chardev_find(const char *name)
{
	struct vmm_device *dev;

	dev = vmm_devdrv_class_find_device_by_name(&chardev_class, name);
	if (!dev) {
		return NULL;
	}

	return vmm_devdrv_get_data(dev);
}

struct chardev_iterate_priv {
	void *data;
	int (*fn)(struct vmm_chardev *dev, void *data);
};

static int chardev_iterate(struct vmm_device *dev, void *data)
{
	struct chardev_iterate_priv *p = data;
	struct vmm_chardev *cdev = vmm_devdrv_get_data(dev);

	return p->fn(cdev, p->data);
}

int vmm_chardev_iterate(struct vmm_chardev *start, void *data,
			int (*fn)(struct vmm_chardev *dev, void *data))
{
	struct vmm_device *st = (start) ? &start->dev : NULL;
	struct chardev_iterate_priv p;

	if (!fn) {
		return VMM_EINVALID;
	}

	p.data = data;
	p.fn = fn;

	return vmm_devdrv_class_device_iterate(&chardev_class, st,
						&p, chardev_iterate);
}

u32 vmm_chardev_count(void)
{
	return vmm_devdrv_class_device_count(&chardev_class);
}

int  vmm_chardev_init(void)
{
	return vmm_devdrv_register_class(&chardev_class);
}
