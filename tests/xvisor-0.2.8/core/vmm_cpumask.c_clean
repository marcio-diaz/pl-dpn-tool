typedef int vmm_spinlock_t;typedef int u64;typedef int u16;typedef int bool;typedef int arch_regs_t;typedef int vmm_rwlock_t;typedef int resource_size_t;typedef int loff_t;typedef int irq_flags_t;typedef int u32;typedef int pthread_t;typedef int vmm_scheduler_ctrl;typedef int virtual_addr_t;typedef int u8;typedef int virtual_size_t;typedef int physical_addr_t;typedef int physical_size_t;typedef int atomic_t;typedef int vmm_iommu_fault_handler_t;typedef int dma_addr_t;typedef int size_t;typedef int off_t;typedef int vmm_dr_release_t;typedef int vmm_dr_match_t;typedef int vmm_clocksource_init_t;typedef int s64;typedef int va_list;typedef int vmm_host_irq_handler_t;typedef int vmm_host_irq_function_t;typedef int vmm_host_irq_init_t;typedef int Elf_Ehdr;typedef int Elf_Shdr;typedef int Elf_Sym;typedef int s16;typedef int vmm_clockchip_init_t;typedef int pthread_spinlock_t;



int vmm_cpu_count = CONFIG_CPU_COUNT;





const unsigned long cpu_bit_bitmap[BITS_PER_LONG+1][BITS_TO_LONGS(CONFIG_CPU_COUNT)] = {

	MASK_DECLARE_8(0),	MASK_DECLARE_8(8),
	MASK_DECLARE_8(16),	MASK_DECLARE_8(24),
	MASK_DECLARE_8(32),	MASK_DECLARE_8(40),
	MASK_DECLARE_8(48),	MASK_DECLARE_8(56),
};

const DECLARE_BITMAP(cpu_all_bits, CONFIG_CPU_COUNT) = VMM_CPU_BITS_ALL;

static DECLARE_BITMAP(cpu_possible_bits, CONFIG_CPU_COUNT) ;
const struct vmm_cpumask *const cpu_possible_mask = to_cpumask(cpu_possible_bits);

static DECLARE_BITMAP(cpu_online_bits, CONFIG_CPU_COUNT) ;
const struct vmm_cpumask *const cpu_online_mask = to_cpumask(cpu_online_bits);

static DECLARE_BITMAP(cpu_present_bits, CONFIG_CPU_COUNT) ;
const struct vmm_cpumask *const cpu_present_mask = to_cpumask(cpu_present_bits);

static DECLARE_BITMAP(cpu_active_bits, CONFIG_CPU_COUNT) ;
const struct vmm_cpumask *const cpu_active_mask = to_cpumask(cpu_active_bits);

void vmm_set_cpu_possible(unsigned int cpu, bool possible)
{
	if (possible)
		vmm_cpumask_set_cpu(cpu, to_cpumask(cpu_possible_bits));
	else
		vmm_cpumask_clear_cpu(cpu, to_cpumask(cpu_possible_bits));
}

void vmm_set_cpu_present(unsigned int cpu, bool present)
{
	if (present)
		vmm_cpumask_set_cpu(cpu, to_cpumask(cpu_present_bits));
	else
		vmm_cpumask_clear_cpu(cpu, to_cpumask(cpu_present_bits));
}

void vmm_set_cpu_online(unsigned int cpu, bool online)
{
	if (online)
		vmm_cpumask_set_cpu(cpu, to_cpumask(cpu_online_bits));
	else
		vmm_cpumask_clear_cpu(cpu, to_cpumask(cpu_online_bits));
}

void vmm_set_cpu_active(unsigned int cpu, bool active)
{
	if (active)
		vmm_cpumask_set_cpu(cpu, to_cpumask(cpu_active_bits));
	else
		vmm_cpumask_clear_cpu(cpu, to_cpumask(cpu_active_bits));
}

void vmm_init_cpu_present(const struct vmm_cpumask *src)
{
	vmm_cpumask_copy(to_cpumask(cpu_present_bits), src);
}

void vmm_init_cpu_possible(const struct vmm_cpumask *src)
{
	vmm_cpumask_copy(to_cpumask(cpu_possible_bits), src);
}

void vmm_init_cpu_online(const struct vmm_cpumask *src)
{
	vmm_cpumask_copy(to_cpumask(cpu_online_bits), src);
}

