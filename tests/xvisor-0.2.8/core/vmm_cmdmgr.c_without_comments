

#include <vmm_error.h>
#include <vmm_heap.h>
#include <vmm_stdio.h>
#include <vmm_mutex.h>
#include <vmm_cmdmgr.h>
#include <libs/stringlib.h>

#define VMM_CMD_DELIM_CHAR	';'
#define VMM_CMD_ARG_MAXCOUNT	32
#define VMM_CMD_ARG_DELIM_CHAR	' '
#define VMM_CMD_ARG_DELIM_CHAR1	'\t'

struct vmm_cmdmgr_ctrl {
	struct vmm_mutex cmd_list_lock;
        struct dlist cmd_list;
};

static struct vmm_cmdmgr_ctrl cmctrl;

int vmm_cmdmgr_register_cmd(struct vmm_cmd *cmd)
{
	bool found;
	struct vmm_cmd *c;

	if (!cmd) {
		return VMM_EFAIL;
	}

	vmm_mutex_lock(&cmctrl.cmd_list_lock);

	c = NULL;
	found = FALSE;
	list_for_each_entry(c, &cmctrl.cmd_list, head) {
		if (strcmp(c->name, cmd->name) == 0) {
			found = TRUE;
			break;
		}
	}

	if (found) {
		vmm_mutex_unlock(&cmctrl.cmd_list_lock);
		return VMM_EINVALID;
	}

	INIT_LIST_HEAD(&cmd->head);

	list_add_tail(&cmd->head, &cmctrl.cmd_list);

	vmm_mutex_unlock(&cmctrl.cmd_list_lock);

	return VMM_OK;
}

int vmm_cmdmgr_unregister_cmd(struct vmm_cmd *cmd)
{
	bool found;
	struct vmm_cmd *c;

	if (!cmd) {
		return VMM_EFAIL;
	}

	vmm_mutex_lock(&cmctrl.cmd_list_lock);

	if (list_empty(&cmctrl.cmd_list)) {
		vmm_mutex_unlock(&cmctrl.cmd_list_lock);
		return VMM_EFAIL;
	}

	c = NULL;
	found = FALSE;
	list_for_each_entry(c, &cmctrl.cmd_list, head) {
		if (strcmp(c->name, cmd->name) == 0) {
			found = TRUE;
			break;
		}
	}

	if (!found) {
		vmm_mutex_unlock(&cmctrl.cmd_list_lock);
		return VMM_ENOTAVAIL;
	}

	list_del(&c->head);

	vmm_mutex_unlock(&cmctrl.cmd_list_lock);

	return VMM_OK;
}

struct vmm_cmd *vmm_cmdmgr_cmd_find(const char *cmd_name)
{
	bool found;
	struct vmm_cmd *c;

	if (!cmd_name) {
		return NULL;
	}

	found = FALSE;
	c = NULL;

	vmm_mutex_lock(&cmctrl.cmd_list_lock);

	list_for_each_entry(c, &cmctrl.cmd_list, head) {
		if (strcmp(c->name, cmd_name) == 0) {
			found = TRUE;
			break;
		}
	}

	vmm_mutex_unlock(&cmctrl.cmd_list_lock);

	if (!found) {
		return NULL;
	}

	return c;
}

struct vmm_cmd *vmm_cmdmgr_cmd(int index)
{
	bool found;
	struct vmm_cmd *c;

	if (index < 0) {
		return NULL;
	}

	c = NULL;
	found = FALSE;

	vmm_mutex_lock(&cmctrl.cmd_list_lock);

	list_for_each_entry(c, &cmctrl.cmd_list, head) {
		if (!index) {
			found = TRUE;
			break;
		}
		index--;
	}

	vmm_mutex_unlock(&cmctrl.cmd_list_lock);

	if (!found) {
		return NULL;
	}

	return c;
}

u32 vmm_cmdmgr_cmd_count(void)
{
	u32 retval;
	struct vmm_cmd *c;

	retval = 0;

	vmm_mutex_lock(&cmctrl.cmd_list_lock);

	list_for_each_entry(c, &cmctrl.cmd_list, head) {
		retval++;
	}

	vmm_mutex_unlock(&cmctrl.cmd_list_lock);

	return retval;
}

int vmm_cmdmgr_execute_cmd(struct vmm_chardev *cdev, int argc, char **argv)
{
	int ret = VMM_OK;
	struct vmm_cmd *cmd = NULL;

	
	if ((cmd = vmm_cmdmgr_cmd_find(argv[0]))) {
		
		if ((ret = cmd->exec(cdev, argc, argv))) {
			vmm_cprintf(cdev, "Error: command %s failed "
					  "(code %d)\n", argv[0], ret);
		}
	} else {
		
		vmm_cprintf(cdev, "Error: unknown command %s\n", argv[0]);
		ret = VMM_ENOTAVAIL;
	}

	return ret;
}

int vmm_cmdmgr_execute_cmdstr(struct vmm_chardev *cdev, char *cmds, 
	bool (*filter)(struct vmm_chardev *cdev, int argc, char **argv))
{
	int argc, ret;
	char *argv[VMM_CMD_ARG_MAXCOUNT];
	char *c = cmds;
	bool eos = 0;
	argc = 0;
	while (*c) {
		while (*c == VMM_CMD_ARG_DELIM_CHAR ||
		       *c == VMM_CMD_ARG_DELIM_CHAR1) {
			c++;
		}
		if (*c == '\0') {
			break;
		}
		if (argc < VMM_CMD_ARG_MAXCOUNT && *c != VMM_CMD_DELIM_CHAR) {
			argv[argc] = c;
			argc++;
		}
		while (*c != VMM_CMD_ARG_DELIM_CHAR &&
		       *c != VMM_CMD_ARG_DELIM_CHAR1 &&
		       *c != VMM_CMD_DELIM_CHAR && *c != '\0') {
			c++;
		}
		if (*c == '\0')
			eos = 1;
		if ((*c == VMM_CMD_DELIM_CHAR || *c == '\0') && argc > 0) {
			*c = '\0';
			c++;
			if (filter && filter(cdev, argc, argv)) {
				vmm_cprintf(cdev, "Error: command %s "
						  "filtered\n", argv[0]);
			} else {
				ret = vmm_cmdmgr_execute_cmd(cdev, argc, argv);
				if (ret)
					return ret;
			}
			argc = 0;
			if (eos)
				break;
		} else {
			*c = '\0';
			c++;
		}
	}
	if (argc > 0) {
		ret = vmm_cmdmgr_execute_cmd(cdev, argc, argv);
		if (ret) {
			return ret;
		}
	}
	return VMM_OK;
}

static void cmd_help_usage(struct vmm_chardev *cdev)
{
	vmm_cprintf(cdev, "Usage: ");
	vmm_cprintf(cdev, "   help\n");
	vmm_cprintf(cdev, "   help <cmd_name1> [<cmd_name2>] ...\n");
}

static int cmd_help_exec(struct vmm_chardev *cdev, int argc, char **argv)
{
	u32 i, cmd_count;
	struct vmm_cmd *cmd;
	
	if (argc == 1) {
		cmd_count = vmm_cmdmgr_cmd_count();
		for (i = 0; i < cmd_count; i++) {
			if ((cmd = vmm_cmdmgr_cmd(i))) {
				vmm_cprintf(cdev, "%-12s - %s\n", 
						  cmd->name, cmd->desc);
			}
		}
	} else if (argc > 1) {
		for (i = 1; i < argc; i++) {
			if ((cmd = vmm_cmdmgr_cmd_find(argv[i]))) {
				vmm_cprintf(cdev, "%-12s - %s\n",
						  cmd->name, cmd->desc);
				cmd->usage(cdev);
			} else {
				vmm_cprintf(cdev, "Cannot find command %s\n",
						  argv[i]);
				return VMM_ENOTAVAIL;
			}
			vmm_printf("\n");
		}
	}

	return VMM_OK;
}

static struct vmm_cmd help_cmd = {
	.name = "help",
	.desc = "displays list of all commands",
	.usage = cmd_help_usage,
	.exec = cmd_help_exec,
};

int __init vmm_cmdmgr_init(void)
{
	memset(&cmctrl, 0, sizeof(cmctrl));

	INIT_MUTEX(&cmctrl.cmd_list_lock);
	INIT_LIST_HEAD(&cmctrl.cmd_list);

	return vmm_cmdmgr_register_cmd(&help_cmd);
}

