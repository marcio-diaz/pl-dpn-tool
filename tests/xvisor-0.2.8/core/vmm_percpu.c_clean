typedef int vmm_spinlock_t;typedef int u64;typedef int u16;typedef int bool;typedef int arch_regs_t;typedef int vmm_rwlock_t;typedef int resource_size_t;typedef int loff_t;typedef int irq_flags_t;typedef int u32;typedef int pthread_t;typedef int vmm_scheduler_ctrl;typedef int virtual_addr_t;typedef int u8;typedef int virtual_size_t;typedef int physical_addr_t;typedef int physical_size_t;typedef int atomic_t;typedef int vmm_iommu_fault_handler_t;typedef int dma_addr_t;typedef int size_t;typedef int off_t;typedef int vmm_dr_release_t;typedef int vmm_dr_match_t;typedef int vmm_clocksource_init_t;typedef int s64;typedef int va_list;typedef int vmm_host_irq_handler_t;typedef int vmm_host_irq_function_t;typedef int vmm_host_irq_init_t;typedef int Elf_Ehdr;typedef int Elf_Shdr;typedef int Elf_Sym;typedef int s16;typedef int vmm_clockchip_init_t;typedef int pthread_spinlock_t;



virtual_addr_t __percpu_vaddr[CONFIG_CPU_COUNT] = { 0 };
virtual_addr_t __percpu_offset[CONFIG_CPU_COUNT] = { 0 };

int  vmm_percpu_init(void)
{
	u32 cpu, pgcount;
	virtual_addr_t base = arch_percpu_vaddr();
	virtual_size_t size = arch_percpu_size();

	size = VMM_ROUNDUP2_PAGE_SIZE(size);
	pgcount = size / VMM_PAGE_SIZE;

	__percpu_vaddr[0] = base;
	__percpu_offset[0] = 0;
	for(cpu = 0; cpu < CONFIG_CPU_COUNT; cpu++) {
		if (cpu == 0) {
			continue;
		}
		__percpu_vaddr[cpu] = vmm_host_alloc_pages(pgcount, 
						VMM_MEMORY_FLAGS_NORMAL);
		if (!__percpu_vaddr[cpu]) {
			return VMM_ENOMEM;
		}
		__percpu_offset[cpu] = __percpu_vaddr[cpu] - base;
		memset((void *)__percpu_vaddr[cpu], 0, VMM_PAGE_SIZE * pgcount);
	}

	return VMM_OK;
}


int  vmm_percpu_init(void)
{
	
	return VMM_OK;
}

