typedef int vmm_spinlock_t;typedef int u64;typedef int u16;typedef int bool;typedef int arch_regs_t;typedef int vmm_rwlock_t;typedef int resource_size_t;typedef int loff_t;typedef int irq_flags_t;typedef int u32;typedef int pthread_t;typedef int vmm_scheduler_ctrl;typedef int virtual_addr_t;typedef int u8;typedef int virtual_size_t;typedef int physical_addr_t;typedef int physical_size_t;typedef int atomic_t;typedef int vmm_iommu_fault_handler_t;typedef int dma_addr_t;typedef int size_t;typedef int off_t;typedef int vmm_dr_release_t;typedef int vmm_dr_match_t;typedef int vmm_clocksource_init_t;typedef int s64;typedef int va_list;typedef int vmm_host_irq_handler_t;typedef int vmm_host_irq_function_t;typedef int vmm_host_irq_init_t;typedef int Elf_Ehdr;typedef int Elf_Shdr;typedef int Elf_Sym;typedef int s16;typedef int vmm_clockchip_init_t;typedef int pthread_spinlock_t;






struct bridge_mac_entry {
	struct vmm_netport *port;
	u8 macaddr[6];
	u64 timestamp;
};

struct bridge_ctrl {
	struct vmm_netswitch *nsw;
	struct vmm_timer_event ev;
	vmm_rwlock_t mac_table_lock;
	u32 mac_table_sz;
	struct bridge_mac_entry *mac_table;
};

static void bridge_mactable_cleanup_port(struct bridge_ctrl *br,
					 struct vmm_netport *port)
{
	u32 m;
	irq_flags_t f;

	vmm_write_lock_irqsave_lite(&br->mac_table_lock, f);
	for (m = 0; m < br->mac_table_sz; m++) {
		if (br->mac_table[m].port == port) {
			br->mac_table[m].port = NULL;
		}
	}
	vmm_write_unlock_irqrestore_lite(&br->mac_table_lock, f);
}

static struct vmm_netport *bridge_mactable_learn_find(struct bridge_ctrl *br,
						      const u8 *dstmac,
						      const u8 *srcmac,
						      struct vmm_netport *src)
{
	u32 i;
	u64 tstamp;
	irq_flags_t f;
	bool learn, update, found;
	struct vmm_netport *dst;
	struct bridge_mac_entry *m;

	
	vmm_read_lock_irqsave_lite(&br->mac_table_lock, f);

	
	learn = TRUE;
	dst = NULL;
	for (i = 0; i < br->mac_table_sz; i++) {
		m = &br->mac_table[i];
		
		if (!m->port) {
			continue;
		}
		
		if (learn &&
		    !compare_ether_addr(m->macaddr, srcmac) &&
		    (m->port == src)) {
			learn = FALSE;
		}
		
		if (!dst &&
		    !compare_ether_addr(m->macaddr, dstmac)) {
			dst = m->port;
		}
		
		if (!learn && dst) {
			break;
		}
	}

	
	vmm_read_unlock_irqrestore_lite(&br->mac_table_lock, f);

	
	if (learn) {
		
		tstamp = vmm_timer_timestamp();

		
		vmm_write_lock_irqsave_lite(&br->mac_table_lock, f);

		
		update = TRUE;
		for (i = 0; i < br->mac_table_sz; i++) {
			m = &br->mac_table[i];
			if (!compare_ether_addr(m->macaddr, srcmac)) {
				m->port = src;
				m->timestamp = tstamp;
				update = FALSE;
				break;
			}
		}

		
		if (update) {
			found = FALSE;
			for (i = 0; i < br->mac_table_sz; i++) {
				m = &br->mac_table[i];
				if (m->port == NULL) {
					found = TRUE;
					break;
				}
			}
			if (found) {
				m->port = src;
				memcpy();
				m->timestamp = tstamp;
			}
		}

		
		vmm_write_unlock_irqrestore_lite(&br->mac_table_lock, f);
	}

	return dst;
}

static void bridge_timer_event(struct vmm_timer_event *ev)
{
	u32 i;
	u64 tstamp;
	irq_flags_t f;
	struct bridge_ctrl *br = ev->priv;
	struct bridge_mac_entry *m;

	DPRINTF("%s: bridge expiry event nsw=%s\n",
		__func__, br->nsw->name);

	
	tstamp = vmm_timer_timestamp();

	
	vmm_write_lock_irqsave_lite(&br->mac_table_lock, f);

	
	for (i = 0; i < br->mac_table_sz; i++) {
		m = &br->mac_table[i];
		if (m->port &&
		    ((m->timestamp - tstamp) > BRIDGE_MAC_EXPIRY)) {
			DPRINTF("%s: purge port=%s\n",
				__func__, m->port->name);
			m->port = NULL;
			memset(m->macaddr, 0, 6);
			m->timestamp = 0;
		}
	}

	
	vmm_write_unlock_irqrestore_lite(&br->mac_table_lock, f);

	
	vmm_timer_event_start(&br->ev, BRIDGE_MAC_EXPIRY);
}


static int bridge_rx_handler(struct vmm_netswitch *nsw,
			     struct vmm_netport *src,
			     struct vmm_mbuf *mbuf)
{
	irq_flags_t f;
	const u8 *srcmac, *dstmac;
	bool broadcast = TRUE;
	struct dlist *l, *l1;
	struct vmm_netport *dst, *port;
	struct bridge_ctrl *br = nsw->priv;

	
	srcmac = ether_srcmac();
	dstmac = ether_dstmac();

	
	dst = bridge_mactable_learn_find(br, dstmac, srcmac, src);

	
	if (!is_broadcast_ether_addr(dstmac) && dst) {
		
		broadcast = FALSE;
	}

	
	if (broadcast) {
		DPRINTF("%s: broadcasting\n", __func__);
		vmm_read_lock_irqsave_lite(&nsw->port_list_lock, f);
		while(l, l1, &nsw->port_list) {
			port = list_port(l);
			if (port == src) {
				continue;
			}
			vmm_read_unlock_irqrestore_lite(&nsw->port_list_lock, f);
			vmm_switch2port_xfer_mbuf(nsw, port, mbuf);
			vmm_read_lock_irqsave_lite(&nsw->port_list_lock, f);
		}
		vmm_read_unlock_irqrestore_lite(&nsw->port_list_lock, f);
	} else {
		DPRINTF("%s: unicasting to \"%s\"\n", __func__, dst->name);
		vmm_switch2port_xfer_mbuf(nsw, dst, mbuf);
	}

	return VMM_OK;
}

static int bridge_port_add(struct vmm_netswitch *nsw, 
			   struct vmm_netport *port)
{
	
	return VMM_OK;
}

static int bridge_port_remove(struct vmm_netswitch *nsw, 
			      struct vmm_netport *port)
{
	struct bridge_ctrl *br = nsw->priv;

	
	bridge_mactable_cleanup_port(br, port);

	return VMM_OK;
}

static int bridge_probe(struct vmm_device *dev,
			const struct vmm_devtree_nodeid *nid)
{
	int rc = VMM_OK;
	struct bridge_ctrl *br;
	struct vmm_netswitch *nsw = NULL;

	nsw = vmm_netswitch_alloc(dev->name);
	if (!nsw) {
		rc = VMM_ENOMEM;
		goto bridge_netswitch_alloc_failed;
	}
	nsw->port2switch_xfer = bridge_rx_handler;
	nsw->port_add = bridge_port_add;
	nsw->port_remove = bridge_port_remove;

	dev->priv = nsw;

	br = vmm_zalloc(sizeof(struct bridge_ctrl));
	if (!br) {
		rc = VMM_ENOMEM;
		goto bridge_alloc_failed;
	}

	br->nsw = nsw;
	INIT_TIMER_EVENT(&br->ev, bridge_timer_event, br);
	INIT_RW_LOCK(&br->mac_table_lock);
	br->mac_table_sz = BRIDGE_MAC_TABLE_SZ;
	br->mac_table = vmm_zalloc(sizeof(struct bridge_mac_entry) *
				   br->mac_table_sz);
	if (!br->mac_table) {
		rc = VMM_ENOMEM;
		goto bridge_alloc_mac_table_fail;
	}

	rc = vmm_netswitch_register(nsw, dev, br);
	if (rc) {
		goto bridge_netswitch_register_fail;
	}

	vmm_timer_event_start(&br->ev, BRIDGE_MAC_EXPIRY);

	return VMM_OK;

bridge_netswitch_register_fail:
bridge_alloc_mac_table_fail:
	vmm_free(br);
bridge_alloc_failed:
	vmm_netswitch_free(nsw);
bridge_netswitch_alloc_failed:
	return rc;
}

static int bridge_remove(struct vmm_device *dev)
{
	struct bridge_ctrl *br;
	struct vmm_netswitch *nsw = dev->priv;

	if (!nsw || !nsw->priv) {
		return VMM_ENODEV;
	}
	br = nsw->priv;

	vmm_timer_event_stop(&br->ev);

	vmm_netswitch_unregister(nsw);

	vmm_free(br->mac_table);
	vmm_free(br);

	vmm_netswitch_free(nsw);

	return VMM_OK;
}

static struct vmm_devtree_nodeid bridge_id_table[] = {
	{.type = "netswitch",.compatible = "bridge"},
	{  },
};

static struct vmm_driver bridge = {
	.name = "bridge",
	.match_table = bridge_id_table,
	.probe = bridge_probe,
	.remove = bridge_remove,
};

int  vmm_bridge_init(void)
{
	return vmm_devdrv_register_driver(&bridge);
}

void  vmm_bridge_exit(void)
{
	vmm_devdrv_unregister_driver(&bridge);
}

