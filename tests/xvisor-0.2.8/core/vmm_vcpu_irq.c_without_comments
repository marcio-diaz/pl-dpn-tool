

#include <arch_vcpu.h>
#include <vmm_error.h>
#include <vmm_heap.h>
#include <vmm_stdio.h>
#include <vmm_timer.h>
#include <vmm_scheduler.h>
#include <vmm_devtree.h>
#include <vmm_vcpu_irq.h>
#include <libs/stringlib.h>

#define DEASSERTED	0
#define ASSERTED	1
#define PENDING		2

void vmm_vcpu_irq_process(struct vmm_vcpu *vcpu, arch_regs_t *regs)
{
	
	if (!vcpu || !vcpu->is_normal) {
		return;
	}

	
	if (!(vmm_manager_vcpu_get_state(vcpu) & 
					VMM_VCPU_STATE_INTERRUPTIBLE)) {
		return;
	}

	
	if (arch_atomic_dec_if_positive(&vcpu->irqs.execute_pending) >= 0) {
		int irq_no = -1;
		u32 i, tmp_prio, irq_count = vcpu->irqs.irq_count;
		u32 irq_prio = 0;

		
		for (i = 0; i < irq_count; i++) {
			if (arch_atomic_read(&vcpu->irqs.irq[i].assert) ==
			    ASSERTED) {
				tmp_prio = arch_vcpu_irq_priority(vcpu, i);
				if (tmp_prio > irq_prio) {
					irq_no = i;
					irq_prio = tmp_prio;
				}
			}
		}
		if (irq_no == -1) {
			return;
		}

		
		if (arch_atomic_cmpxchg(&vcpu->irqs.irq[irq_no].assert,
					ASSERTED, PENDING) == ASSERTED) {
			if (arch_vcpu_irq_execute(vcpu, regs, irq_no,
			    	vcpu->irqs.irq[irq_no].reason) == VMM_OK) {
				arch_atomic_write(&vcpu->irqs.
						  irq[irq_no].assert,
						  DEASSERTED);
				arch_atomic64_inc(&vcpu->irqs.
						  execute_count);
			} else {
				
				arch_atomic_inc(&vcpu->irqs.
						execute_pending);
				arch_atomic_write(&vcpu->irqs.
						  irq[irq_no].assert,
						  ASSERTED);
			}
		}
	}
}

static void vcpu_irq_wfi_try_resume(struct vmm_vcpu *vcpu, void *data)
{
	
	if (data == (void *)TRUE) {
		vmm_manager_vcpu_resume(vcpu);
	}
}

static int vcpu_irq_wfi_resume(struct vmm_vcpu *vcpu, bool use_async_ipi)
{
	int rc;
	irq_flags_t flags;
	bool try_vcpu_resume = FALSE;

	if (!vcpu) {
		return VMM_EINVALID;
	}

	
	vmm_spin_lock_irqsave_lite(&vcpu->irqs.wfi.lock, flags);

	
	if (vcpu->irqs.wfi.state) {
		try_vcpu_resume = TRUE;

		
		vcpu->irqs.wfi.state = FALSE;

		
		vmm_timer_event_stop(vcpu->irqs.wfi.priv);

		rc = VMM_OK;
	} else {
		rc = VMM_ENOTAVAIL;
	}

	
	vmm_spin_unlock_irqrestore_lite(&vcpu->irqs.wfi.lock, flags);

	
	if (use_async_ipi) {
		
		vmm_manager_vcpu_hcpu_func(vcpu,
			VMM_VCPU_STATE_INTERRUPTIBLE,
			vcpu_irq_wfi_try_resume,
			(try_vcpu_resume) ? (void *)TRUE : (void *)FALSE);
	} else {
		
		if (try_vcpu_resume) {
			vmm_manager_vcpu_resume(vcpu);
		}
	}

	return rc;
}

static void vcpu_irq_wfi_timeout(struct vmm_timer_event *ev)
{
	vcpu_irq_wfi_resume(ev->priv, FALSE);
}

void vmm_vcpu_irq_assert(struct vmm_vcpu *vcpu, u32 irq_no, u64 reason)
{
	
	if (!vcpu || !vcpu->is_normal) {
		return;
	}

	
	if (!(vmm_manager_vcpu_get_state(vcpu) & VMM_VCPU_STATE_INTERRUPTIBLE)) {
		return;
	}

	
	if (irq_no > vcpu->irqs.irq_count) {
		return;
	}

	
	if (arch_atomic_cmpxchg(&vcpu->irqs.irq[irq_no].assert, 
				DEASSERTED, ASSERTED) == DEASSERTED) {
		if (arch_vcpu_irq_assert(vcpu, irq_no, reason) == VMM_OK) {
			vcpu->irqs.irq[irq_no].reason = reason;
			arch_atomic_inc(&vcpu->irqs.execute_pending);
			arch_atomic64_inc(&vcpu->irqs.assert_count);
		} else {
			arch_atomic_write(&vcpu->irqs.irq[irq_no].assert,
					  DEASSERTED);
		}
	}

	
	vcpu_irq_wfi_resume(vcpu, FALSE);
}

void vmm_vcpu_irq_deassert(struct vmm_vcpu *vcpu, u32 irq_no)
{
	
	if (!vcpu || !vcpu->is_normal) {
		return;
	}

	
	if (irq_no > vcpu->irqs.irq_count) {
		return;
	}

	
	if (arch_vcpu_irq_deassert(vcpu, irq_no,
				   vcpu->irqs.irq[irq_no].reason) == VMM_OK) {
		arch_atomic64_inc(&vcpu->irqs.deassert_count);
	}

	
	arch_atomic_write(&vcpu->irqs.irq[irq_no].assert, DEASSERTED);

	
	vcpu->irqs.irq[irq_no].reason = 0x0;
}

int vmm_vcpu_irq_wait_resume(struct vmm_vcpu *vcpu, bool use_async_ipi)
{
	
	if (!vcpu || !vcpu->is_normal) {
		return VMM_EFAIL;
	}

	
	return vcpu_irq_wfi_resume(vcpu, use_async_ipi);
}

int vmm_vcpu_irq_wait_timeout(struct vmm_vcpu *vcpu, u64 nsecs)
{
	irq_flags_t flags;
	bool try_vcpu_pause = FALSE;

	
	if (!vcpu || !vcpu->is_normal) {
		return VMM_EFAIL;
	}

	
	vmm_spin_lock_irqsave_lite(&vcpu->irqs.wfi.lock, flags);

	if (!vcpu->irqs.wfi.state &&
	    !arch_atomic_read(&vcpu->irqs.execute_pending)) {
		try_vcpu_pause = TRUE;

		
		vcpu->irqs.wfi.state = TRUE;

		
		if (!nsecs) {
			nsecs = CONFIG_WFI_TIMEOUT_SECS * 1000000000ULL;
		}
		vmm_timer_event_start(vcpu->irqs.wfi.priv, nsecs);
	}

	
	vmm_spin_unlock_irqrestore_lite(&vcpu->irqs.wfi.lock, flags);

	
	if (try_vcpu_pause) {
		vmm_manager_vcpu_pause(vcpu);
	}

	return VMM_OK;
}

bool vmm_vcpu_irq_wait_state(struct vmm_vcpu *vcpu)
{
	bool ret = FALSE;
	irq_flags_t flags;

	
	if (!vcpu || !vcpu->is_normal) {
		return VMM_EFAIL;
	}

	
	vmm_spin_lock_irqsave_lite(&vcpu->irqs.wfi.lock, flags);

	
	ret = vcpu->irqs.wfi.state;

	
	vmm_spin_unlock_irqrestore_lite(&vcpu->irqs.wfi.lock, flags);

	return ret;
}

int vmm_vcpu_irq_init(struct vmm_vcpu *vcpu)
{
	int rc;
	u32 ite, irq_count;
	struct vmm_timer_event *ev;

	
	if (!vcpu) {
		return VMM_EFAIL;
	}

	
	if (!vcpu->is_normal) {
		return VMM_OK;
	}

	
	irq_count = arch_vcpu_irq_count(vcpu);

	
	if (!vcpu->reset_count) {
		
		memset(&vcpu->irqs, 0, sizeof(struct vmm_vcpu_irqs));

		
		vcpu->irqs.irq =
		    vmm_zalloc(sizeof(struct vmm_vcpu_irq) * irq_count);
		if (!vcpu->irqs.irq) {
			return VMM_ENOMEM;
		}

		
		ev = vmm_zalloc(sizeof(struct vmm_timer_event));
		if (!ev) {
			vmm_free(vcpu->irqs.irq);
			vcpu->irqs.irq = NULL;
			return VMM_ENOMEM;
		}
		vcpu->irqs.wfi.priv = ev;

		
		INIT_SPIN_LOCK(&vcpu->irqs.wfi.lock);

		
		INIT_TIMER_EVENT(ev, vcpu_irq_wfi_timeout, vcpu);
	}

	
	vcpu->irqs.irq_count = irq_count;

	
	arch_atomic_write(&vcpu->irqs.execute_pending, 0);

	
	arch_atomic64_write(&vcpu->irqs.assert_count, 0);
	arch_atomic64_write(&vcpu->irqs.execute_count, 0);
	arch_atomic64_write(&vcpu->irqs.deassert_count, 0);

	
	for (ite = 0; ite < irq_count; ite++) {
		vcpu->irqs.irq[ite].reason = 0;
		arch_atomic_write(&vcpu->irqs.irq[ite].assert, DEASSERTED);
	}

	
	vcpu->irqs.wfi.state = FALSE;
	rc = vmm_timer_event_stop(vcpu->irqs.wfi.priv);
	if (rc != VMM_OK) {
		vmm_free(vcpu->irqs.irq);
		vcpu->irqs.irq = NULL;
		vmm_free(vcpu->irqs.wfi.priv);
		vcpu->irqs.wfi.priv = NULL;
	}

	return rc;
}

int vmm_vcpu_irq_deinit(struct vmm_vcpu *vcpu)
{
	
	if (!vcpu) {
		return VMM_EFAIL;
	}

	
	if (!vcpu->is_normal) {
		return VMM_OK;
	}

	
	vmm_timer_event_stop(vcpu->irqs.wfi.priv);

	
	vmm_free(vcpu->irqs.wfi.priv);
	vcpu->irqs.wfi.priv = NULL;

	
	vmm_free(vcpu->irqs.irq);
	vcpu->irqs.irq = NULL;

	return VMM_OK;
}
